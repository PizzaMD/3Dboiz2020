import math
import csv
import numpy as np

#WGS84 
##Equatorial Radius = 6378137
#Inverse Flattening = 298.257223563

a = 6378137
inv_f = 298.257224
f = 1/inv_f
g = (1 - f) * (1 - f)

input_path = 'fuse_to_obj.csv'
output_path = 'testproj.txt'
wgs84_data = []
local_coords_data = []
res = 2048

lat_ref = 45.90414414
long_ref = 11.02845385
alt_ref = 227.5819

q_s = 0.362114
q_x = 0.374050
q_y = 0.592222
q_z = 0.615007

def wgs84_to_ecef(lat, long, alt):
    lat_cos = math.cos(lat * math.pi / 180)
    lat_sin = math.sin(lat * math.pi / 180)

    long_cos = math.cos(long * math.pi / 180)
    long_sin = math.sin(long * math.pi / 180)

    d = 1 / math.sqrt(math.pow(lat_cos, 2) + g * math.pow(lat_sin, 2))

    x = (a * d + alt) * lat_cos * long_cos
    y = (a * d + alt) * lat_cos * long_sin
    z = (a * d * g + alt) * lat_sin

    return x, y, z

def ecef_to_enu(x, y, z, lat_ref, long_ref, alt_ref):
    lat_cos_ref = math.cos(lat_ref * math.pi / 180)
    lat_sin_ref = math.sin(lat_ref * math.pi / 180)

    long_cos_ref = math.cos(long_ref * math.pi / 180)
    long_sin_ref = math.sin(long_ref * math.pi / 180)

    d_ref = 1 / math.sqrt(math.pow(lat_cos_ref, 2) + g * math.pow(lat_sin_ref, 2))

    x_ref = (a * d_ref + alt_ref) * lat_cos_ref * long_cos_ref
    y_ref = (a * d_ref + alt_ref) * lat_cos_ref * long_sin_ref
    z_ref = (a * d_ref * g + alt_ref) * lat_sin_ref

    east = (-(x - x_ref) * long_sin_ref) + ((y - y_ref) * long_cos_ref)
    north = (-long_cos_ref * lat_sin_ref * (x - x_ref)) - (lat_sin_ref * long_sin_ref * (y - y_ref)) + (lat_cos_ref * (z - z_ref))
    up = (lat_cos_ref * long_cos_ref * (x - x_ref)) + (lat_cos_ref * long_sin_ref * (y - y_ref)) + (lat_sin_ref * (z - z_ref))

    return east, north, up

def enu_to_cc(east, north, up):
    Ned = [north, east, -up]

    cc = [ 
        [1 - 2 * q_y *q_y - 2 * q_z * q_z, 2 * q_x * q_y + 2 * q_s * q_z, 2 * q_x * q_z - 2 * q_s * q_y],
        [2 * q_x * q_y - 2 * q_s * q_z, 1 - 2 * q_x * q_x - 2 * q_z * q_z, 2 * q_y * q_z + 2 * q_s * q_x], 
        [2 * q_x * q_z + 2 * q_s * q_y, 2 * q_y * q_z - 2 * q_s * q_x, 1 - 2 * q_x * q_x - 2 * q_y * q_y]
        ]
    
    return np.dot(cc, Ned)[0], np.dot(cc, Ned)[1], np.dot(cc, Ned)[2]

def cc_to_ic(x, y, z):
    global x_return
    global y_return
    global belongsTo
    #Belongs to Front Image(1)
    if z > 0 and z > abs(x) and z > abs(y):
        x_return = (int) (y / z * (res - 1) / 2 + (res + 1) / 2)
        y_return = (int) (x / z * (res - 1) / 2 + (res + 1) / 2)
        belongsTo = 1
    #Belongs to Back Image(2)
    if z < 0 and z < -abs(x) and z < -abs(y):
        x_return = (int) (-y / z * (res - 1) / 2 + (res + 1) / 2)
        y_return = (int) (x / z * (res - 1) / 2 + (res + 1) / 2)
        belongsTo = 2
    #Belongs to Left Image(3)
    if x < 0 and x < -abs(z) and x < -abs(y):
        x_return = (int) (-y / x * (res - 1) / 2 + (res + 1) / 2)
        y_return = (int) (-z / x * (res - 1) / 2 + (res + 1) / 2)
        belongsTo = 3
    #Belongs to Right Image(4)
    if x > 0 and x > abs(y) and x > abs(z):
        x_return = (int) (y / x * (res - 1) / 2 + (res + 1) / 2)
        y_return = (int) (-z / x * (res - 1) / 2 + (res + 1) / 2)
        belongsTo = 4

    return x_return, y_return, belongsTo

def wgs84_to_ic(lat, long, alt, lat_ref, long_ref, alt_ref):
    x, y, z = wgs84_to_ecef(lat, long, alt)
    east, north, up = ecef_to_enu(x, y, z, lat_ref, long_ref, alt_ref)
    x_2, y_2, z_2 = enu_to_cc(east, north, up)
    x_3, y_3, belongsTo = cc_to_ic(x_2, y_2, z_2)

    return x_3, y_3, belongsTo

def read_file(input_path):
    file = open(input_path, newline = '')
    reader = csv.reader(file)

    header = next(reader)
    data = []

    for row in reader:
        lat = float(row[0])
        long = float(row[1])
        alt = float(row[2])
        inten = float(row[3])

        data.append([lat, long, alt, inten])
    file.close()

    return data

def write_file(output_path):
    f = open(output_path, 'w')

    for t in local_coords_data:
        line = ' '.join(str(x) for x in t)
        f.write(line + '\n')
        print('Line ' + str(t))
    f.close()

def coordTransformation():
    for pt in wgs84_data:
        x, y, belongsTo = wgs84_to_ic(pt[0], pt[1], pt[2], lat_ref, long_ref, alt_ref)
        local_coords_data.append([x, y, belongsTo])
        
    write_file(output_path)
    return local_coords_data


wgs84_data = read_file(input_path)
local_coords_data = coordTransformation()

write_file(output_path)

